/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AlbumClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    apiAttachmentsPhoto(): Observable<AttachmentDto[]> {
        let url_ = this.baseUrl + "/api/Attachments/Photo";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiAttachmentsPhoto(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAttachmentsPhoto(<any>response_);
                } catch (e) {
                    return <Observable<AttachmentDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<AttachmentDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processApiAttachmentsPhoto(response: HttpResponseBase): Observable<AttachmentDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <AttachmentDto[]>JSON.parse(_responseText, this.jsonParseReviver);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AttachmentDto[]>(<any>null);
    }

    /**
     * @return Success
     */
    apiAttachmentsVideo(): Observable<AttachmentDto[]> {
        let url_ = this.baseUrl + "/api/Attachments/Video";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiAttachmentsVideo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAttachmentsVideo(<any>response_);
                } catch (e) {
                    return <Observable<AttachmentDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<AttachmentDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processApiAttachmentsVideo(response: HttpResponseBase): Observable<AttachmentDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <AttachmentDto[]>JSON.parse(_responseText, this.jsonParseReviver);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AttachmentDto[]>(<any>null);
    }

    /**
     * @return Success
     */
    apiAttachmentsDelete(id: string): Observable<Result> {
        let url_ = this.baseUrl + "/api/Attachments/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiAttachmentsDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAttachmentsDelete(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processApiAttachmentsDelete(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <Result>JSON.parse(_responseText, this.jsonParseReviver);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            result404 = _responseText === "" ? null : <Result>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    apiAttachmentsBulkdeleteattachments(body: string[] | null | undefined): Observable<Result> {
        let url_ = this.baseUrl + "/api/Attachments/BulkDeleteAttachments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiAttachmentsBulkdeleteattachments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAttachmentsBulkdeleteattachments(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processApiAttachmentsBulkdeleteattachments(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <Result>JSON.parse(_responseText, this.jsonParseReviver);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            result404 = _responseText === "" ? null : <Result>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    /**
     * @param file (optional) 
     * @param attachmentTypeId (optional) 
     * @return Success
     */
    apiAttachmentsPost(file: FileParameter | null | undefined, attachmentTypeId: string | null | undefined): Observable<Result> {
        let url_ = this.baseUrl + "/api/Attachments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("File", file.data, file.fileName ? file.fileName : "File");
        if (attachmentTypeId !== null && attachmentTypeId !== undefined)
            content_.append("AttachmentTypeId", attachmentTypeId.toString());

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiAttachmentsPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAttachmentsPost(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processApiAttachmentsPost(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <Result>JSON.parse(_responseText, this.jsonParseReviver);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            result400 = _responseText === "" ? null : <UploadFileRequest>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    /**
     * @param files (optional) 
     * @return Success
     */
    apiAttachmentsBulkinsertphotos(files: FileParameter[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Attachments/BulkInsertPhotos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (files !== null && files !== undefined)
            files.forEach(item_ => content_.append("files", item_.data, item_.fileName ? item_.fileName : "files") );

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiAttachmentsBulkinsertphotos(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAttachmentsBulkinsertphotos(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processApiAttachmentsBulkinsertphotos(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param files (optional) 
     * @return Success
     */
    apiAttachmentsBulkinsertvideos(files: FileParameter[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Attachments/BulkInsertVideos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (files !== null && files !== undefined)
            files.forEach(item_ => content_.append("files", item_.data, item_.fileName ? item_.fileName : "files") );

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiAttachmentsBulkinsertvideos(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAttachmentsBulkinsertvideos(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processApiAttachmentsBulkinsertvideos(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return Success
     */
    apiAttachmenttypeGet(): Observable<AttachmentTypeDto[]> {
        let url_ = this.baseUrl + "/api/AttachmentType";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiAttachmenttypeGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAttachmenttypeGet(<any>response_);
                } catch (e) {
                    return <Observable<AttachmentTypeDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<AttachmentTypeDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processApiAttachmenttypeGet(response: HttpResponseBase): Observable<AttachmentTypeDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <AttachmentTypeDto[]>JSON.parse(_responseText, this.jsonParseReviver);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AttachmentTypeDto[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    apiAttachmenttypePost(body: AttachmentTypeDto | undefined): Observable<Result> {
        let url_ = this.baseUrl + "/api/AttachmentType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiAttachmenttypePost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAttachmenttypePost(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processApiAttachmenttypePost(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <Result>JSON.parse(_responseText, this.jsonParseReviver);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            result404 = _responseText === "" ? null : <Result>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            result400 = _responseText === "" ? null : <AttachmentTypeDto>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    /**
     * @return Success
     */
    apiAttachmenttypeDetail(id: string): Observable<AttachmentTypeDto> {
        let url_ = this.baseUrl + "/api/AttachmentType/Detail/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiAttachmenttypeDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAttachmenttypeDetail(<any>response_);
                } catch (e) {
                    return <Observable<AttachmentTypeDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<AttachmentTypeDto>><any>_observableThrow(response_);
        }));
    }

    protected processApiAttachmenttypeDetail(response: HttpResponseBase): Observable<AttachmentTypeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <AttachmentTypeDto>JSON.parse(_responseText, this.jsonParseReviver);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            result404 = _responseText === "" ? null : <AttachmentTypeDto>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AttachmentTypeDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    apiAttachmenttypePut(key: string, body: AttachmentTypeDto | undefined): Observable<Result> {
        let url_ = this.baseUrl + "/api/AttachmentType/{key}";
        if (key === undefined || key === null)
            throw new Error("The parameter 'key' must be defined.");
        url_ = url_.replace("{key}", encodeURIComponent("" + key));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiAttachmenttypePut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAttachmenttypePut(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processApiAttachmenttypePut(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <Result>JSON.parse(_responseText, this.jsonParseReviver);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            result404 = _responseText === "" ? null : <Result>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            result400 = _responseText === "" ? null : <AttachmentTypeDto>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    /**
     * @return Success
     */
    apiAttachmenttypeDelete(id: string): Observable<Result> {
        let url_ = this.baseUrl + "/api/AttachmentType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiAttachmenttypeDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAttachmenttypeDelete(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processApiAttachmenttypeDelete(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <Result>JSON.parse(_responseText, this.jsonParseReviver);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            result404 = _responseText === "" ? null : <Result>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    /**
     * @return Success
     */
    apiHealth(): Observable<void> {
        let url_ = this.baseUrl + "/api/Health";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiHealth(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiHealth(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processApiHealth(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return Success
     */
    apiVideohomepageGet(): Observable<VideoHomePageDto[]> {
        let url_ = this.baseUrl + "/api/VideoHomePage";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiVideohomepageGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiVideohomepageGet(<any>response_);
                } catch (e) {
                    return <Observable<VideoHomePageDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<VideoHomePageDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processApiVideohomepageGet(response: HttpResponseBase): Observable<VideoHomePageDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <VideoHomePageDto[]>JSON.parse(_responseText, this.jsonParseReviver);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VideoHomePageDto[]>(<any>null);
    }

    /**
     * @param key (optional) 
     * @param id (optional) 
     * @param width (optional) 
     * @param height (optional) 
     * @param youtubeLink (optional) 
     * @param youtubeId (optional) 
     * @param youtubeImage (optional) 
     * @param descriptions (optional) 
     * @param code (optional) 
     * @param created (optional) 
     * @param lastModified (optional) 
     * @param file (optional) 
     * @return Success
     */
    apiVideohomepagePut(key: string | undefined, id: string | undefined, width: number | undefined, height: number | undefined, youtubeLink: string | null | undefined, youtubeId: string | null | undefined, youtubeImage: string | null | undefined, descriptions: string | null | undefined, code: string | null | undefined, created: Date | undefined, lastModified: Date | undefined, file: FileParameter | null | undefined): Observable<Result> {
        let url_ = this.baseUrl + "/api/VideoHomePage?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (id === null || id === undefined)
            throw new Error("The parameter 'id' cannot be null.");
        else
            content_.append("Id", id.toString());
        if (width === null || width === undefined)
            throw new Error("The parameter 'width' cannot be null.");
        else
            content_.append("Width", width.toString());
        if (height === null || height === undefined)
            throw new Error("The parameter 'height' cannot be null.");
        else
            content_.append("Height", height.toString());
        if (youtubeLink !== null && youtubeLink !== undefined)
            content_.append("YoutubeLink", youtubeLink.toString());
        if (youtubeId !== null && youtubeId !== undefined)
            content_.append("YoutubeId", youtubeId.toString());
        if (youtubeImage !== null && youtubeImage !== undefined)
            content_.append("YoutubeImage", youtubeImage.toString());
        if (descriptions !== null && descriptions !== undefined)
            content_.append("Descriptions", descriptions.toString());
        if (code !== null && code !== undefined)
            content_.append("Code", code.toString());
        if (created === null || created === undefined)
            throw new Error("The parameter 'created' cannot be null.");
        else
            content_.append("Created", created.toJSON());
        if (lastModified === null || lastModified === undefined)
            throw new Error("The parameter 'lastModified' cannot be null.");
        else
            content_.append("LastModified", lastModified.toJSON());
        if (file !== null && file !== undefined)
            content_.append("File", file.data, file.fileName ? file.fileName : "File");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiVideohomepagePut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiVideohomepagePut(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processApiVideohomepagePut(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <Result>JSON.parse(_responseText, this.jsonParseReviver);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            result404 = _responseText === "" ? null : <Result>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            result400 = _responseText === "" ? null : <VideoHomePageDto>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    /**
     * @param id (optional) 
     * @param width (optional) 
     * @param height (optional) 
     * @param youtubeLink (optional) 
     * @param youtubeId (optional) 
     * @param youtubeImage (optional) 
     * @param descriptions (optional) 
     * @param code (optional) 
     * @param created (optional) 
     * @param lastModified (optional) 
     * @param file (optional) 
     * @return Success
     */
    apiVideohomepagePost(id: string | undefined, width: number | undefined, height: number | undefined, youtubeLink: string | null | undefined, youtubeId: string | null | undefined, youtubeImage: string | null | undefined, descriptions: string | null | undefined, code: string | null | undefined, created: Date | undefined, lastModified: Date | undefined, file: FileParameter | null | undefined): Observable<Result> {
        let url_ = this.baseUrl + "/api/VideoHomePage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (id === null || id === undefined)
            throw new Error("The parameter 'id' cannot be null.");
        else
            content_.append("Id", id.toString());
        if (width === null || width === undefined)
            throw new Error("The parameter 'width' cannot be null.");
        else
            content_.append("Width", width.toString());
        if (height === null || height === undefined)
            throw new Error("The parameter 'height' cannot be null.");
        else
            content_.append("Height", height.toString());
        if (youtubeLink !== null && youtubeLink !== undefined)
            content_.append("YoutubeLink", youtubeLink.toString());
        if (youtubeId !== null && youtubeId !== undefined)
            content_.append("YoutubeId", youtubeId.toString());
        if (youtubeImage !== null && youtubeImage !== undefined)
            content_.append("YoutubeImage", youtubeImage.toString());
        if (descriptions !== null && descriptions !== undefined)
            content_.append("Descriptions", descriptions.toString());
        if (code !== null && code !== undefined)
            content_.append("Code", code.toString());
        if (created === null || created === undefined)
            throw new Error("The parameter 'created' cannot be null.");
        else
            content_.append("Created", created.toJSON());
        if (lastModified === null || lastModified === undefined)
            throw new Error("The parameter 'lastModified' cannot be null.");
        else
            content_.append("LastModified", lastModified.toJSON());
        if (file !== null && file !== undefined)
            content_.append("File", file.data, file.fileName ? file.fileName : "File");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiVideohomepagePost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiVideohomepagePost(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processApiVideohomepagePost(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <Result>JSON.parse(_responseText, this.jsonParseReviver);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            result404 = _responseText === "" ? null : <Result>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            result400 = _responseText === "" ? null : <VideoHomePageDto>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    /**
     * @return Success
     */
    apiVideohomepageDelete(id: string): Observable<Result> {
        let url_ = this.baseUrl + "/api/VideoHomePage/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiVideohomepageDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiVideohomepageDelete(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processApiVideohomepageDelete(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <Result>JSON.parse(_responseText, this.jsonParseReviver);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            result404 = _responseText === "" ? null : <Result>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }
}

export interface AttachmentTypeDto {
    id?: string;
    name?: string | undefined;
    created?: Date;
    lastModified?: Date;
}

export interface AttachmentDto {
    id?: string;
    fileName?: string | undefined;
    fileType?: string | undefined;
    filePath?: string | undefined;
    fileUrl?: string | undefined;
    fileSize?: number | undefined;
    created?: Date;
    attachmentTypeId?: string;
    attachmentType?: AttachmentTypeDto;
    attachmentTypeName?: string | undefined;
}

export interface Result {
    succeeded?: boolean;
    error?: string | undefined;
}

export interface UploadFileRequest {
    file?: string | undefined;
    attachmentTypeId?: string | undefined;
}

export interface VideoHomePageDto {
    id?: string;
    width?: number;
    height?: number;
    youtubeLink?: string | undefined;
    youtubeId?: string | undefined;
    youtubeImage?: string | undefined;
    descriptions?: string | undefined;
    code?: string | undefined;
    created?: Date;
    lastModified?: Date;
    file?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}